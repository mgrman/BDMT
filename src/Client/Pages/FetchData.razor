@page "/fetchdata"
@inject IWeatherService weatherService

<h1>Weather forecast</h1>

<p>This page is used to demonstrate fetching data from server.</p>
<p>Data is fetched only for logged in users. The error message you see simulates what would the user see if developer forgot to protect access to the service.</p>
<p>This is especially problematic for server-side mode (Authorize attribute is evaluated).</p>
<p>With ServiceGuard generated classes the method calls are protected.</p>

@if (exception != null)
{
    <p>@exception.GetType().Name<em>@exception.Message</em></p>
}
else if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<WeatherForecast>? forecasts = null;
    private Exception? exception = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            forecasts = await weatherService.GetWeatherForecasts();
        }
        catch(Exception ex)
        {
            exception = ex;
        }
    }

}
